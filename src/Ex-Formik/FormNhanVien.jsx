import React from "react";
import InputCustom from "./InputCustom";
import ButtonCuston from "./ButtonCuston";
import { useFormik } from "formik";
import * as Yup from "yup";
export default function FormNhanVien({ handleAddNhanVien }) {
  let {
    handleChange,
    handleSubmit,
    resetForm,
    values,
    errors,
    handleBlur,
    touched,
  } = useFormik({
    initialValues: {
      // initialValues ƒë·ªãnh nghƒ©a c√°c thu·ªôc t√≠nh l∆∞u tr·ªØ c√°c gi√° tr·ªã cho c√°c input , m·ªôt l∆∞u √Ω mu·ªën c√°c input th√™m d·ªØ li·ªáu v√†o ƒë√∫ng c√°c thu·ªôc t√≠nh c√≥ trong initialValues th√¨ c·∫ßn truy·ªÅn thu·ªôc t√≠nh name c·ªßa input ƒë√∫ng  t√™n c√°c thu·ªôc t√≠nh mu·ªën l∆∞u tr·ªØ
      msnv: "",
      hoTen: "",
      email: "",
      soDienThoai: "",
      chucVu: "",
      tienLuong: "",
    },
    onSubmit: (value, { resetForm }) => {
      console.log("üöÄ ~ FormNhanVien ~ value:", value);
      // ch·∫°y ph∆∞∆°ng th·ª©c th√™m nh√¢n vi√™n th√™m d·ªØ li·ªáu l√™n m·∫£ng cha
      handleAddNhanVien(value);
      resetForm();
    },
    validationSchema: Yup.object({
      msnv: Yup.string()
        .required("Vui L√≤ng Kh√¥ng B·ªè Tr·ªëng")
        .min(4, "Vui l√≤ng nh·∫≠p t·ªëi thi·ªÉu 4 k√Ω t·ª±")
        .max(8, "Vui l√≤ng nh·∫≠p t·ªëi ƒëa 8 k√Ω t·ª±"),
      hoTen: Yup.string().required("Vui L√≤ng Kh√¥ng B·ªè Tr·ªëng"),
      email: Yup.string()
        .email("Vui L√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng email")
        .required("Vui L√≤ng Kh√¥ng B·ªè Tr·ªëng"),
      soDienThoai: Yup.string()
        .required("Vui L√≤ng Kh√¥ng B·ªè Tr·ªëng")
        .matches(
          /^(0[2|3|5|7|8|9])+([0-9]{8,10})$/,
          "Vui l√≤ng nh·∫≠p ƒë√∫ng s·ªë ƒëi·ªán tho·∫°i"
        ),
      tienLuong: Yup.string().required("Vui l√≤ng kh√¥ng b·ªè tr·ªëng"),
      chucVu: Yup.string().required("Vui l√≤ng kh√¥ng b·ªè tr·ªëng"),
    }),
  });
  console.log(touched);
  //msnv , hoTen,email,soDienThoai,chucVu,tienLuong
  return (
    <div>
      <form onSubmit={handleSubmit} className="grid grid-cols-2 gap-5">
        <div>
          <InputCustom
            onBlur={handleBlur}
            placeholder="Vui l√≤ng nh·∫≠p msnv"
            label="MSNV"
            id="msnv"
            name="msnv"
            onChange={handleChange}
            value={values.msnv}
            error={errors.msnv}
            touched={touched.msnv}
          />
          {/* x·ªß l√Ω hi·ªán th·ªã l·ªói th√¥ng qua 2 ƒë·ªëi t∆∞·ª£ng l√† errors v√† touched , error hi·ªán l·ªói v√† touched gi√∫p ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ thao t√°c v·ªõi input hay ch∆∞a */}
        </div>
        <div>
          <InputCustom
            onBlur={handleBlur}
            placeholder="Vui l√≤ng nh·∫≠p H·ªç T√™n"
            label="H·ªç T√™n"
            id="hoten"
            name="hoTen"
            onChange={handleChange}
            value={values.hoTen}
            error={errors.hoTen}
            touched={touched.hoTen}
          />
        </div>
        <div className="col-span-2">
          <InputCustom
            placeholder="Vui l√≤ng nh·∫≠p email"
            label="Email"
            name="email"
            onChange={handleChange}
            onBlur={handleBlur}
            value={values.email}
            error={errors.email}
            touched={touched.email}
          />
        </div>
        <div className="col-span-2">
          <InputCustom
            placeholder="Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
            label="S·ªë ƒêi·ªán Tho·∫°i"
            id="soDienThoai"
            name="soDienThoai"
            onBlur={handleBlur}
            onChange={handleChange}
            value={values.soDienThoai}
            error={errors.soDienThoai}
            touched={touched.soDienThoai}
          />
        </div>
        <div>
          <InputCustom
            onBlur={handleBlur}
            placeholder="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn l∆∞∆°ng"
            label="Ti·ªÅn L∆∞∆°ng"
            id="tienLuong"
            name="tienLuong"
            onChange={handleChange}
            value={values.tienLuong}
            error={errors.tienLuong}
            touched={touched.tienLuong}
          />
        </div>
        <div>
          <label
            htmlFor="chucVu"
            className="block mb-2 text-sm font-medium text-gray-900 "
          >
            Ch·ª©c V·ª•
          </label>
          <select
            onBlur={handleBlur}
            id="chucVu"
            name="chucVu"
            value={values.chucVu}
            onChange={handleChange}
            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 "
            error={errors.chucVu}
            touched={touched.chucVu}
          >
            <option selected>Ch·ªçn ch·ª©c v·ª•</option>
            <option value="Gi√°m ƒë·ªëc">Gi√°m ƒë·ªëc</option>
            <option value="Tr∆∞·ªüng ph√≤ng">Tr∆∞·ªüng ph√≤ng</option>
            <option value="C√¥ng nh√¢n">C√¥ng nh√¢n</option>
            <option value="Lao c√¥ng">Lao c√¥ng</option>
          </select>
        </div>

        <div className="space-x-5">
          <ButtonCuston
            type="submit"
            className="bg-black"
            content="Th√™m Nh√¢n Vi√™n"
          />
          <ButtonCuston
            onClick={() => {
              resetForm();
            }}
            className="bg-purple-500"
            content="Reset"
          />
          <ButtonCuston
            className="bg-orange-500"
            content="C·∫≠p nh·∫≠t nh√¢n vi√™n"
          />
        </div>
      </form>
    </div>
  );
}
